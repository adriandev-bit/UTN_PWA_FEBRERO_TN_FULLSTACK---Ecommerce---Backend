import ENVIROMENT from "../config/enviroment.config.js";
import { ServerError } from "../utils/errors.utils.js";
import jwt from 'jsonwebtoken'
export const authMiddleware = (request, response, next) => {
    try {
        console.log("üìå Headers recibidos:", request.headers); // üîç Ver qu√© headers llegan

        const authorization_header = request.headers['authorization'];

        if (!authorization_header) {
            console.log("‚ùå No se recibi√≥ header de autorizaci√≥n");
            throw new ServerError('No has proporcionado un header de autorizaci√≥n', 401);
        }

        console.log("‚úÖ Header de autorizaci√≥n recibido:", authorization_header);

        const authorization_token = authorization_header.split(' ')[1];

        if (!authorization_token) {
            console.log("‚ùå No se encontr√≥ un token en el header");
            throw new ServerError('No has proporcionado un token de autorizaci√≥n', 401);
        }

        console.log("üîë Token extra√≠do:", authorization_token);

        try {
            const user_info = jwt.verify(authorization_token, ENVIROMENT.SECRET_KEY_JWT);
            console.log("‚úÖ Token decodificado correctamente:", user_info);

            request.user = user_info; // üîπ Aqu√≠ se asigna `user`
            next();
        } catch (error) {
            console.log("‚ùå Error verificando el token:", error.message);
            throw new ServerError('Token inv√°lido o vencido', 400);
        }
    } catch (error) {
        console.log("‚ùå Error en autenticaci√≥n:", error.message);

        return response.status(error.status || 500).json({
            ok: false,
            status: error.status || 500,
            message: error.message || "Internal server error",
        });
    }
};
